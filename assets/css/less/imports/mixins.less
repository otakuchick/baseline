// ==============================================================
//
// UTILITY MIXINS
//
// ==============================================================

// Unit Return Mixins - Borders
// @type: null = border
// If @val < 4 will return 0, or thin, medium or thick keywords
// ==============================================================

// TOP OFFSET
.topUnitReturn(
  @val,
  @context: @baseFontPx,
  @convertToPxBelowThreshold: null
) when (@convertToPxBelowThreshold = null), (isnumber(@convertToPxBelowThreshold)) and (@val >= @convertToPxBelowThreshold) {
  @top: unit(round((@val / @context),8), em);
}
.topUnitReturn(
  @val,
  @context: @baseFontPx,
  @convertToPxBelowThreshold: null
) when (isnumber(@convertToPxBelowThreshold)) and (@val < @convertToPxBelowThreshold) {
  @top: ceil(unit(@val,px));
}
.topUnitReturn(
  @val,
  @context: @baseFontPx,
  @convertToPxBelowThreshold: null
) when (@val = 0) {
  @top: 0;
}


// RIGHT OFFSET
.rightUnitReturn(
  @val,
  @context: @baseFontPx,
  @convertToPxBelowThreshold: null
) when (@convertToPxBelowThreshold = null), (isnumber(@convertToPxBelowThreshold)) and (@val >= @convertToPxBelowThreshold)  {
  @right: unit(round((@val / @context),8), em);
}
.rightUnitReturn(
  @val,
  @context: @baseFontPx,
  @convertToPxBelowThreshold: null
) when (isnumber(@convertToPxBelowThreshold)) and (@val < @convertToPxBelowThreshold) {
  @right: ceil(unit(@val,px));
}
.rightUnitReturn(
  @val,
  @context: @baseFontPx,
  @convertToPxBelowThreshold: null
) when (@val = 0) {
  @right: 0;
}


// BOTTOM OFFSET
.bottomUnitReturn(
  @val,
  @context: @baseFontPx,
  @convertToPxBelowThreshold: null
)  when (@convertToPxBelowThreshold = null), (isnumber(@convertToPxBelowThreshold)) and (@val >= @convertToPxBelowThreshold) {
  @bottom: unit(round((@val / @context),8), em);
}
.bottomUnitReturn(
  @val,
  @context: @baseFontPx,
  @convertToPxBelowThreshold: null
) when (isnumber(@convertToPxBelowThreshold)) and (@val < @convertToPxBelowThreshold) {
  @bottom: ceil(unit(@val,px));
}
.bottomUnitReturn(
  @val,
  @context: @baseFontPx,
  @convertToPxBelowThreshold: null
) when (@val = 0) {
  @bottom: 0;
}


// LEFT OFFSET
.leftUnitReturn(
  @val,
  @context: @baseFontPx,
  @convertToPxBelowThreshold: null
) when (@convertToPxBelowThreshold = null), (isnumber(@convertToPxBelowThreshold)) and (@val >= @convertToPxBelowThreshold) {
  @left: unit(round((@val / @context),8), em);
}
.leftUnitReturn(
  @val,
  @context: @baseFontPx,
  @convertToPxBelowThreshold: null
) when (isnumber(@convertToPxBelowThreshold)) and (@val < @convertToPxBelowThreshold) {
  @left: ceil(unit(@val,px));
}
.leftUnitReturn(
  @val,
  @context: @baseFontPx,
  @convertToPxBelowThreshold: null
) when (@val = 0) {
  @left: 0;
}


// ==========================================================================
// Global Mixins and Variables
// ==========================================================================

// GRID AND SITE SETUP
// ==========================================================================

// Sets max-width on site wrapper
@absMaxWidth: ((1176 / @baseFontPx) + 0em);

// Root Font Size
@baseFontPx: 17;
//Root pixel line-height target
@baseLeadingTargetPx: 24;
// Base LIne Height as unitless values
@defaultLineHeight: 1.45;
@headingLineHeight: 1.2;
// Converts the above into a percentage; used to set font-size on HTML element 
@rootFontSize: (@baseFontPx / 16) * 100 + 0%;

// Convert pixel line-height to Ems 
@baselineEm: @baseLeadingTargetPx / @baseFontPx + 0em;
//Width Correction for IE7
@subPixelCorrection: (0.5 / 960px) * 100 * 1%;


// MEDIA QUERY BREAKPOINT VARIABLES
// ==========================================================================

// larger tablets
@mqMaxTablet: ((959 / 16) + 0em);
@mqMinTablet: ((726 / 16) + 0em);

// smaller tablets
@mqMaxSmallTablet: ((725 / 16) + 0em);

@mqMinDesktop: ((960 / 16) + 0em);
@mqTablet601: ((601 / 16) + 0em);
@mqTablet600: ((600 / 16) + 0em);
@mqMinSmallTablet: ((481 / 16) + 0em);
@mqMaxMobile: ((480 / 16) + 0em);



// Global Color Variables
// ==========================================================================

// Colors
@text: lighten(#000,12%);
@charcoal: lighten(#000,12%);
@textSecondary: darken(@moduleGrey,36%);
@darkGrey: darken(@moduleGrey,36%);
@grey: lighten(@text,15%);
@lightGrey: #c7c7c7;
@wellGrey: #e5e5e5;
@paleGrey: #f5f5f5;
@mediumGrey: #999999;

@link: #0065b8;
@linkHover:#0087f5; //lighten(@brandBlue,37%);
@linkHoverBg:#d1eaff;
@linkVisited: #6592b8;

@areaDefault: #ffffff;
@areaHover: #d1eaff;
@areaVisited: #f0f8ff;
@areaActive:#c2e3ff;

@brandBlue: #00355f;
@brandBlueSecondary: #58738a;
@infoSecondary: #58738a;
@brandYellow: #ffcb00; //actual brand color is: #eec218
@moduleBlue: #00335d;
@moduleGrey: #c7c7c7;
@moduleBorder: darken(@moduleGrey,18%);
@orange: #F06601;
@error: #CC0000;

@headline: #D4E9EE;

@alertDefault: @moduleGrey;
@alertLight: lighten(@alertDefault,10%);
@alertBold: @brandBlue;
@alertLink: @link;
@alertInfo: #3b4c5b;
@alertInfoBg: #d7e5f5;
@alertSuccess: #477a00;
@alertSuccessBg: #e0f5d7;
@alertWarn: #7a5505;
@alertWarnBg: #f5e9ba;
@alertImportant: #F06601;
@alertError: #b80000;
@alertErrorBg: #f5d7d7;
@urgency: #d60000;

// Travelocity Color Variables
// ==========================================================================
@tvlyGreen: #7dad06;
@tvlyDarkGreen: #2f5806;
@tvlyOrange: #f37737;
@tvlyDarkBlue: #004074;
@tvlyLinkBlue: #004e93;
@tvlyMidBlue: #53a0d3;


// Fonts and Sizes
// ==========================================================================
//
//  Font Size and Family Stacks:
//  
//   Font Size:
//     #font > .size(20);
//  
//     Outputs 20px converted to ems
//
//  Line Height:
//     #font > .line-height(20,1);
//  
//     Outputs multiples of converted to ems
//   
//  Font Stacks:
//     #font > .primary-stack  
//  
//     Outputs font-family: ...
//
#font() {
  .size(
    @target: @baseFontPx,
    @context: @baseFontPx
  ) {
    @emFontSize: (@target / @context);
    font-size:@emFontSize + 0em;
  }

  // font size mixins that also return correct unitless line-height
  // font-size > @h4 = 1.2
  .sizeIncludeLineheight(
    @target: @baseFontPx,
    @context: @baseFontPx
  ) when (@target > @h4){
    // calculation helper
    @emFontSize: (@target / @context);
    font-size: @emFontSize + 0em;
    line-height: @headingLineHeight;
  }
  // font-size < @h3 = 1.2
  .sizeIncludeLineheight(
    @target: @baseFontPx,
    @context: @baseFontPx
  ) when (@target < @h3){
    // calculation helper
    @emFontSize: (@target / @context);
    font-size: @emFontSize + 0em;
    line-height: @defaultLineHeight;
  }
  // Line height mixins
  .line-height(
    @target: @baseFontPx,
    @lineMultiple: 1
  ){
    @emFontSize: (@target / @baseFontPx);
    line-height: (@baseLeadingTargetPx / @baseFontPx) / @emFontSize * @lineMultiple + 0em;
  }
  // Unitless line-height font-size > @h4 = 1.2
  .lineHeightUnitless(
    @target: @baseFontPx,
    @lineMultiple: 1
  ) when (@target > @h4) {
    @emFontSize: (@target / @baseFontPx);
    line-height: (@headingLineHeight * @lineMultiple);
  }
  // font-size < @h3 = 1.45
  .lineHeightUnitless(
    @target: @baseFontPx,
    @lineMultiple: 1
  ) when (@target < @h3) {
    @emFontSize: (@target / @baseFontPx);
    line-height: (@defaultLineHeight * @lineMultiple);
  }

  // Font stacks
  .primary-stack() {
    font-family: "Helvetica Neue", Arial, "Lucida Grande", sans-serif;
  }
}

//
// Predefined Font Sizes
//
// Example Usage:
//   #font > .size(@h1);
//
// ==========================================================================
@h1: 30;
@h1Display: 45;
@h2: 25;
@h3: 20;
@h4: @baseFontPx;
@h5: 15;
@h6: 13;
// Body Copy
@copy: 17;
@copySmall: 13;

// Font Size Element Shortcuts
// ==========================================================================

// H tag helpers
.H(
  1,
  @context: @baseFontPx
) {
  .margin(b,@h1,24);
  #font > .sizeIncludeLineheight(@h1,@context);
}
.H(
  d,
  @context: @baseFontPx
) {
  .margin(b,@h1Display,24);
  #font > .sizeIncludeLineheight(@h1Display,@context);
}
.H(
  2,
  @context: @baseFontPx
) {
  .margin(b,@h2,24);
  #font > .sizeIncludeLineheight(@h2,@context);
}
.H(
  3,
  @context: @baseFontPx
) {
  .margin(trb,@h3,24,0,24);
  #font > .sizeIncludeLineheight(@h3,@context);
}
.H(
  4,
  @context: @baseFontPx
) {
  .margin(trb,@h4,18,0,18);
  #font > .sizeIncludeLineheight(@h4,@context);
}
.H(
  5,
  @context: @baseFontPx
) {
  .margin(trb,@h5,18,0,18);
  #font > .sizeIncludeLineheight(@h5,@context);
}
.H(
  6,
  @context: @baseFontPx
) {
  .margin(b,@h6,12);
  #font > .sizeIncludeLineheight(@h6,@context);
  font-weight: bold;
}

// Grid Mixins and Variables
// ==========================================================================
#grid() {
  // Full-width rows: #grid > .column(NumberOfColumnsToSpan);
  .column(
    @count: 1,
    @cols: 12
  ) {
    width: (100 / @cols) * @count + 0%;
  }

  // Inset/Outset Columns
  .push(
    @count: 1,
    @cols: 12
  ){
    margin-left: (100 / @cols) * @count + 0%;
  }
  .pull(
    @count: 1,
    @cols: 12
  ){
    margin-left: -(100 / @cols) * @count + 0%;
  }
}

// Grid Columns Predefined
.cols1(@cols:12) {#grid > .column(1,@cols)}
.cols2(@cols:12) {#grid > .column(2,@cols)}
.cols3(@cols:12) {#grid > .column(3,@cols)}
.cols4(@cols:12) {#grid > .column(4,@cols)}
.cols5(@cols:12) {#grid > .column(5,@cols)}
.cols6(@cols:12) {#grid > .column(6,@cols)}
.cols7(@cols:12) {#grid > .column(7,@cols)}
.cols8(@cols:12) {#grid > .column(8,@cols)}
.cols9(@cols:12) {#grid > .column(9,@cols)}
.cols10(@cols:12) {#grid > .column(10,@cols)}
.cols11(@cols:12) {#grid > .column(11,@cols)}
.cols12(@cols:12) {#grid > .column(12,@cols)}

// Guarded
.cols1(@count:1,@cols:12) when (@count) and (@cols) {#grid > .column(1,@cols)}
.cols2(@count:2,@cols:12) when (@count) and (@cols) {#grid > .column(2,@cols)}
.cols3(@count:3,@cols:12) when (@count) and (@cols) {#grid > .column(3,@cols)}
.cols4(@count:4,@cols:12) when (@count) and (@cols) {#grid > .column(4,@cols)}
.cols5(@count:5,@cols:12) when (@count) and (@cols) {#grid > .column(5,@cols)}
.cols6(@count:6,@cols:12) when (@count) and (@cols) {#grid > .column(6,@cols)}
.cols7(@count:7,@cols:12) when (@count) and (@cols) {#grid > .column(7,@cols)}
.cols8(@count:8,@cols:12) when (@count) and (@cols) {#grid > .column(8,@cols)}
.cols9(@count:9,@cols:12) when (@count) and (@cols) {#grid > .column(9,@cols)}
.cols10(@count:10,@cols:12) when (@count) and (@cols) {#grid > .column(10,@cols)}
.cols11(@count:11,@cols:12) when (@count) and (@cols) {#grid > .column(11,@cols)}
.cols12(@count:12,@cols:12) when (@count) and (@cols) {#grid > .column(12,@cols)}

// Push Cols
.in1(@cols:12) {#grid > .push(1,@cols)}
.in2(@cols:12) {#grid > .push(2,@cols)}
.in3(@cols:12) {#grid > .push(3,@cols)}
.in4(@cols:12) {#grid > .push(4,@cols)}
.in5(@cols:12) {#grid > .push(5,@cols)}
.in6(@cols:12) {#grid > .push(6,@cols)}
.in7(@cols:12) {#grid > .push(7,@cols)}
.in8(@cols:12) {#grid > .push(8,@cols)}
.in9(@cols:12) {#grid > .push(9,@cols)}
.in10(@cols:12) {#grid > .push(10,@cols)}
.in11(@cols:12) {#grid > .push(11,@cols)}

// Pull Cols
.out1(@cols:12) {#grid > .pull(1,@cols)}
.out2(@cols:12) {#grid > .pull(2,@cols)}
.out3(@cols:12) {#grid > .pull(3,@cols)}
.out4(@cols:12) {#grid > .pull(4,@cols)}
.out5(@cols:12) {#grid > .pull(5,@cols)}
.out6(@cols:12) {#grid > .pull(6,@cols)}
.out7(@cols:12) {#grid > .pull(7,@cols)}
.out8(@cols:12) {#grid > .pull(8,@cols)}
.out9(@cols:12) {#grid > .pull(9,@cols)}
.out10(@cols:12) {#grid > .pull(10,@cols)}
.out11(@cols:12) {#grid > .pull(11,@cols)}


// Height Mixins
// ==========================================================================

// === Height ===
.height(
  @target: @baseFontPx,
  @h
) {
  height: (@h / @target) + 0em;
}

// Width ===
.width(
  @target: @baseFontPx,
  @w
) {
  width: (@w / @target) + 0em;
}

// === Max Width ===
.max-height(
  @target: @baseFontPx,
  @h
) {
  max-height: (@h / @target) + 0em;
}

// === Max Width ===
.max-width(
  @target: @baseFontPx,
  @w
) {
  max-width: (@w / @target) + 0em;
}

// === Min Width ===
.min-height(
  @target: @baseFontPx,
  @h
) {
  min-height: (@h / @target) + 0em;
}

// === Min Width ===
.min-width(
  @target: @baseFontPx,
  @w
) {
  min-width: (@w / @target) + 0em;
}

// === ELEMENT POSITION === 
// Use when you need to set specific position lengths in ems. DO NOT USE FOR % values. 
// For percentage and zero values, use plain CSS, not this mixin
//
// USAGE:
// .pos(%SIDE%,@target,@t[,@r,@b,@l])
//
// @params
// %SIDE% [required]: Used to identify which side to apply trbl (top, right, bottom and left), 
// @target [required]: font-size of element for em conversion. Default: @baseFontPx
// @t, @r, @b, @l [required based on number of sides you're setting]: Length in pixels used for Top, Right, Bottom, and Left position. Will be converted to ems

// === All Four Sides ===
.pos(
  trbl,
  @target: @baseFontPx,
  @t,
  @r,
  @b,
  @l
) {
  top: (@t / @target) + 0em;
  right: (@r / @target) + 0em;
  bottom: (@b / @target) + 0em;
  left: (@l / @target) + 0em;
}

// === Top ===
.pos(
  t,
  @target: @baseFontPx,
  @t
) {
  top: (@t / @target) + 0em;
}

// === Right ===
.pos(
  r,
  @target: @baseFontPx,
  @r
) {
  right: (@r / @target) + 0em;
}

// === Bottom ===
.pos(
  b,
  @target: @baseFontPx,
  @b
) {
  bottom: (@b / @target) + 0em;
}

// === Left ===
.pos(
  l,
  @target: @baseFontPx,
  @l
) {
  left: (@l / @target) + 0em;
}

// === Top-Right ===
.pos(
  tr,
  @target: @baseFontPx,
  @t,
  @r
) {
  top: (@t / @target) + 0em;
  right: (@r / @target) + 0em;
}


// === Top-Left ===
.pos(
  tl,
  @target: @baseFontPx,
  @t,
  @l
) {
  top: (@t / @target) + 0em;
  left: (@l / @target) + 0em;
}

// === MARGINS === 
// %SIDE% : [required] which side(s) to apply margin. values are: a (shorthand single value), trbl (top-right-bottom-left)
//    tr (top-right), trb (top-right-bottom), t (top), r (right), b (bottom), l (left)
// @target: font-size of element for em conversion context. Default: @baseFontPx 
// @t: sets top margin amount in pixels (exclude "px")
// @r: sets right margin amount
// @b: sets bottom margin
// @l: sets left margin


// Top + Right 
// Only Single Margin Supplied
.margin(
  a,
  @target: @baseFontPx,
  @t
) {
  margin: (@t / @target) + 0em;
}
// Top Right
.margin(
  tr,
  @target: @baseFontPx,
  @t,
  @r
) {
  margin: (@t / @target) + 0em (@r / @target) + 0em ;
}
// Top Right Bottom
.margin(
  trb,
  @target: @baseFontPx,
  @t,
  @r,
  @b
) {
  margin: (@t / @target) + 0em (@r / @target) + 0em (@b / @target) + 0em;
}
// All Four - single property supplied
.margin(
  trbl,
  @target: @baseFontPx,
  @t,
  @r,
  @b,
  @l
) {
  margin: (@t / @target) + 0em (@r / @target) + 0em (@b / @target) + 0em (@l / @target) + 0em;
}
// Top
.margin(
  t,
  @target: @baseFontPx,
  @t
) {
  margin-top: (@t / @target) + 0em;
}
// Right
.margin(
  r,
  @target: @baseFontPx,
  @r
) {
  margin-right: (@r / @target) + 0em;
}
// Bottom
.margin(
  b,
  @target: @baseFontPx,
  @b
) {
  margin-bottom: (@b / @target) + 0em;
}
// Left
.margin(
  l,
  @target: @baseFontPx,
  @l
) {
  margin-left: (@l / @target) + 0em;
}



// === PADDING ===
// Same as margin, only with padding :) 

// Only Single Padding Supplied  
.padding(
  a,
  @target: @baseFontPx,
  @t
) {
  padding: (@t / @target) + 0em;
}
// Top Right, sets shorthand for top + right
.padding(
  tr,
  @target: @baseFontPx,
  @t,
  @r
) {
  padding: (@t / @target) + 0em (@r / @target) + 0em;
}
// Top Right Bottom, sets shorthand for top + right
.padding(
  trb,
  @target: @baseFontPx,
  @t,
  @r,
  @b
) {
  padding: (@t / @target) + 0em (@r / @target) + 0em (@b / @target) + 0em;
}
// Top Right Bottom Left
.padding(
  trbl,
  @target: @baseFontPx,
  @t,
  @r,
  @b,
  @l
) {
  padding: ((@t / @target) + 0em) ((@r / @target) + 0em) ((@b / @target) + 0em) ((@l / @target) + 0em);
}
// Top
.padding(
  t,
  @target: @baseFontPx,
  @t
) {
  padding-top: (@t / @target) + 0em;
}
// Right
.padding(
  r,
  @target: @baseFontPx,
  @r
) {
  padding-right: (@r / @target) + 0em;
}
// Bottom
.padding(
  b,
  @target: @baseFontPx,
  @b
) {
  padding-bottom: (@b / @target) + 0em;
}
// Left
.padding(
  l,
  @target: @baseFontPx,
  @l
) {
  padding-left: (@l / @target) + 0em;
}


// === Borders ===
// Make sure to supply the element's font-size, or @baseFontPx. This will ensure you get proper conversion
.border(
  a,
  @target: @baseFontPx,
  @t: 1,
  @color: transparent,
  @type: solid
) {
  .topUnitReturn(@t,@target,4);
  border: @top @type @color;
}
//Top Right
// ==============================================================
.border(
  tr,
  @target: @baseFontPx,
  @t: 1,
  @r:1,
  @color: transparent,
  @type: solid
) {
  .topUnitReturn(@t,@target,4);
  .rightUnitReturn(@r,@target,4);
  border: @top @type @color;
  border-width: @top @right;
}

//Top Right Bottom
.border(
  trb,
  @target: @baseFontPx,
  @t:1,
  @r,
  @b,
  @color: transparent,
  @type: solid
) {
  .topUnitReturn(@t,@target,4);
  .rightUnitReturn(@r,@target,4);
  .bottomUnitReturn(@b,@target,4);

  border: @top @type @color;
  border-width: @top @right @bottom;
}

//Top Right Bottom Left
.border(
  trbl,
  @target: @baseFontPx,
  @t,
  @r,
  @b,
  @l,
  @color: transparent,
  @type: solid
){
  .topUnitReturn(@t,@target,4);
  .rightUnitReturn(@r,@target,4);
  .bottomUnitReturn(@b,@target,4);
  .leftUnitReturn(@l,@target,4);

  border: @top @type @color;
  border-width: @top @right @bottom @left;
}

//Top
.border(
  t,
  @target: @baseFontPx,
  @t,
  @color: transparent,
  @type: solid
) {
  .topUnitReturn(@t,@target,4);
  border-top: @top @type @color;
}

//Right
.border(
  r,
  @target: @baseFontPx,
  @r,
  @color: transparent,
  @type: solid
) {
  .rightUnitReturn(@r,@target,4);
  border-right: @right @type @color;
}

//Bottom
.border(
  b,
  @target: @baseFontPx,
  @b,
  @color: transparent,
  @type: solid
) {
  .bottomUnitReturn(@b,@target,4);
  border-bottom: @bottom @type @color;
}

//Left
.border(
  l,
  @target: @baseFontPx,
  @l,
  @color: transparent,
  @type: solid
) {
  .leftUnitReturn(@l,@target,4);
  border-left: @left @type @color;
}


// Border Widths
// ==========================================================================

//All; Shorthand
.border-width(
  a,
  @target: @baseFontPx,
  @t
) {
  .topUnitReturn(@t,@target,4);
  border-width: @top;
}

//Top
.border-width(
  t,
  @target: @baseFontPx,
  @t
) {
  .topUnitReturn(@t,@target,4);
  border-width: @top;
}
//Right
.border-width(
  r,
  @target: @baseFontPx,
  @r
) {
  .rightUnitReturn(@r,@target,4);
  border-right-width: @right;
}

//Bottom
.border-width(
  b,
  @target: @baseFontPx,
  @b
) {
  .bottomUnitReturn(@b,@target,4);
  border-bottom-width: @bottom;
}

// Left
.border-width(
  l,
  @target: @baseFontPx,
  @l
) {
  .leftUnitReturn(@l,@target,4);
  border-left-width: @left;
}

//Top-Right Bottom-Left
.border-width(
  tr,
  @target: @baseFontPx,
  @t,
  @r
) {
  .topUnitReturn(@t,@target,4);
  .rightUnitReturn(@r,@target,4);
  border-width: @top @right;
}

//Top-Right Bottom
.border-width(
  trb,
  @target: @baseFontPx,
  @t,
  @r,
  @b
) {
  .topUnitReturn(@t,@target,4);
  .rightUnitReturn(@r,@target,4);
  .bottomUnitReturn(@b,@target,4);
  border-width: @top @right @bottom;
}

//Top-Right Bottom-Left
.border-width(
  trbl,
  @target: @baseFontPx,
  @t,
  @r,
  @b,
  @l
) {
  .topUnitReturn(@t,@target,4);
  .rightUnitReturn(@r,@target,4);
  .bottomUnitReturn(@b,@target,4);
  .leftUnitReturn(@l,@target,4);
  border-width: @top @right @bottom @left;
}


// ==========================================================================
// CSS3 Mix-ins
// ==========================================================================

// Form Fields
// ==========================================================================

// Reset appearance: -webkit only (removed from CSS4 spec)
.appearance(@type: none) {
  -webkit-appearance: @type;
  -moz-appearance: @type;
  -o-appearance: @type;
  appearance: @type;
}

// LAYOUT
// ==========================================================================

.col(
  @target: @baseFontPx
) {
  position: relative;
  float: left;
  zoom: 1;
  .padding(l, @target, 24);
}

.cols-nested(
  @target: @baseFontPx
) {
  position: relative;
  .margin(tr,@target,0,-24);
  .padding(trbl,@target,0,24,0,0);
  clear: both;
  .cf;
}

//Multi-Columns
.columns(
  @count: 2,
  @length: auto
) {
  -webkit-columns: @count @length;
  -moz-columns:    @count @length;
  -o-columns:      @count @length;
  columns:         @count @length;
}
.column-rule(
  @width: 1,
  @style: solid,
  @color: @moduleGrey
) {
  -webkit-column-rule: @width @style @color;
  -moz-column-rule:    @width @style @color;
  -o-column-rule:      @width @style @color;
  column-rule:         @width @style @color;
}
.column-gap(
  @target: @baseFontPx,
  @w
) {
  -webkit-column-gap: ((@w / @target) + 0em);
  -moz-column-gap:    ((@w / @target) + 0em);
  -o-column-gap:      ((@w / @target) + 0em);
  column-gap:         ((@w / @target) + 0em);
}

.column-span(
  @span: all
) {
  -webkit-column-span: @span;
  -moz-column-span:    @span;
  -o-column-span:      @span;
  column-column-span:  @span;
}


// Box Model Adjustment
.box-sizing(
  @type: border-box
){
  -webkit-box-sizing: @type;
  -moz-box-sizing:    @type;
  -ms-box-sizing:     @type;
  box-sizing:         @type;

}

// apply to container
.flexbox(){
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

// apply to children
.flex(
  @grow: 1
){
  -webkit-box-flex: @grow;
  -moz-box-flex: @grow;
  -webkit-flex: @grow;
  -ms-flex: @grow;
  flex: @grow;

}

.boxflex-order(@order){
  -webkit-box-ordinal-group: @order;
  -moz-box-ordinal-group: @order;
  -ms-flex-order: @order;
  -webkit-order: @order;
  order: @order;

}

// Animation
// ==========================================================================

.transition(@arguments){
  -webkit-transition: @arguments;
  -moz-transition:    @arguments;
  -o-transition:      @arguments;
  transition:         @arguments;
}

.animation(@arguments) {
  -webkit-animation: @arguments;
  -o-animation:    @arguments;
  -moz-animation:  @arguments;
  -ms-animation:   @arguments;
  animation:  @arguments;
}

// Transformations
// ==========================================================================
.transform(@string){
  -webkit-transform: @string;
  -moz-transform:    @string;
  -ms-transform:     @string;
  -o-transform:      @string;
  transform:         @string;
}
// scale
.scale (@factorX:0,@factorY:0) when (@factorY > 0) {
  -webkit-transform: scale(@factorX, @factorY);
  -moz-transform:    scale(@factorX, @factorY);
  -ms-transform:     scale(@factorX, @factorY);
  -o-transform:      scale(@factorX, @factorY);
  transform:          scale(@factorX, @factorY);
}

.scale (@factorX:0) {
  -webkit-transform: scale(@factorX);
  -moz-transform:    scale(@factorX);
  -ms-transform:     scale(@factorX);
  -o-transform:      scale(@factorX);
  transform:          scale(@factorX);
}
// end
.rotate (@deg) {
  -webkit-transform: rotate(@deg);
  -moz-transform:    rotate(@deg);
  -ms-transform:     rotate(@deg);
  -o-transform:      rotate(@deg);
  transform:         rotate(@deg);
}
.rotateZ (@deg) {
  -webkit-transform: rotatez(@deg);
  -moz-transform:    rotatez(@deg);
  -ms-transform:     rotatez(@deg);
  -o-transform:      rotatez(@deg);
  transform:         rotatez(@deg);
}
.skew (@deg, @deg2) {
  -webkit-transform: skew(@deg, @deg2);
  -moz-transform: skew(@deg, @deg2);
  -ms-transform: skew(@deg, @deg2);
  -o-transform: skew(@deg, @deg2);
  transform: skew(@deg, @deg2);
}
.translate (@x, @y:0) {
  -webkit-transform: translate(@x, @y);
  -moz-transform:    translate(@x, @y);
  -ms-transform:     translate(@x, @y);
  -o-transform:      translate(@x, @y);
  transform:         translate(@x, @y);
}
.translate3d (@x: 0, @y: 0, @z: 0) {
  -webkit-transform: translate3d(@x, @y, @z);
  -moz-transform: 	 translate3d(@x, @y, @z);
  -ms-transform: 		 translate3d(@x, @y, @z);
  -o-transform: 		 translate3d(@x, @y, @z);
  transform:         transform3d(@x, @y, @z);
}
.perspective (@value: 1000) {
  -webkit-perspective: 	@value;
  -moz-perspective: 	@value;
  -ms-perspective: 	@value;
  perspective: 		@value;
}
.transform-origin (@x:center, @y:center) {
  -webkit-transform-origin: @x @y;
  -moz-transform-origin:    @x @y;
  -ms-transform-origin:     @x @y;
  -o-transform-origin:      @x @y;
  transform-origin:         @x @y;
}


// Visual Styling
// ==========================================================================

.opacity(@opacity: 0.5) {
  -webkit-opacity: @opacity;
  opacity: @opacity;

  @ie-opacity: @opacity*100;
  -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=@{ie-opacity})";
  filter: ~"alpha(opacity = @{ie-opacity})";
}

//opacity but not for IE < 9
.opacity-no-ie(@opacity: 0.5) {
  -webkit-opacity: @opacity;
  opacity: @opacity;
}

.box-shadow(
  @arguments
){
  -moz-box-shadow: @arguments;
  -webkit-box-shadow: @arguments;
  box-shadow: @arguments;
}


// @h = horizontal offset
// @v = verical offset
// @b = blur radius
// @s = spread raduis
// @c = color
// @i = inset (optional)
.box-shadow-em(
  @target: @baseFontPx,
  @h,
  @v,
  @b,
  @s,
  @c,
  @i: ~''
){
  -moz-box-shadow:@i ((@h/@target)+0em) ((@v/@target)+0em) ((@b/@target)+0em) ((@s/@target)+0em) @c;
  -webkit-box-shadow:@i ((@h/@target)+0em) ((@v/@target)+0em) ((@b/@target)+0em) ((@s/@target)+0em) @c;
  box-shadow:@i ((@h/@target)+0em) ((@v/@target)+0em) ((@b/@target)+0em) ((@s/@target)+0em) @c;
}


.background-size-em(
  w,
  @target: @baseFontPx,
  @w)
{
  background-size: (@w / @target) + 0em;
}



.text-shadow(
  @arguments
) {
  text-shadow: @arguments;
}

.word-break(){
  -ms-word-break: break-all;
  word-break: break-all;
  word-break: break-word;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}


// text indent
.text-indent(
  @target: @baseFontPx,
  @i
) {
  text-indent: (@i / @target) + 0em;
}

// TODO document these mixins
// Text overflow
// @param type: ellipses[clip|visible|custom]
// @param string: custom string to use in place of ellipsis
.text-overflow(
  @type: ellipsis
) when not (@type = custom){
  // for Opera
  -o-text-overflow: @type;
  // end Opera
  text-overflow: @type;
}

.text-overflow (
  @type: custom,
  @string: ''
) when (@type = custom) {
  // for Opera
  -o-text-overflow: @string;
  // end Opera
  text-overflow: @string;
}

// Text Truncate mixin
// @param overflow: sets the overflow for the container,
#truncate() {
  overflow: hidden;
  .text-overflow(ellipsis);
  white-space: nowrap;
}




// Backgrounds
// ==========================================================================

// Background Position - Percentage
.background-position(
  cent,
  @x: 0,
  @y: 0
) {
  background-position: @x @y;
}

// Background Position - ems
.background-position(
  em,
  @target: @baseFontPx,
  @x: 0,
  @y: 0
) {
  background-position: ((@x / @target) + 0em) ((@y / @target) + 0em);
}

// Background-Clip
.background-clip(
  @type
) {
  -webkit-background-clip: @type;
  -moz-background-clip: @type;
  -o-background-clip: @type;
  background-clip: @type;
}

// Background Size
.background-size(
  @size: contain
) {
  -webkit-background-size: @arguments;
  -moz-background-size: @arguments;
  -ms-background-size: @arguments;
  -o-background-size: @arguments;
  -ms-background-size: @arguments;
  background-size: @arguments;

}

.background-size-em(
  w,
  @target: @baseFontPx,
  @w)
{
  background-size: (@w / @target) + 0em;
}

.background-size-em(
  wh,
  @target: @baseFontPx,
  @w,
  @h)
{
  background-size:((@w / @target) + 0em) ((@h / @target) + 0em);
}

// Background
.background(
  @target: @baseFontPx,
  @url,
  @l,
  @t,
  @repeat:no-repeat,
  @color:transparent
) {
  background:@color url(@url) ((@l / @target) + 0em) ((@t / @target) + 0em) @repeat;
}

// Backgorund RGBA
.background-rgba(
  @color: #000,
  @alpha: 50%
) {
  background-color: @color;
  background-color: fade(@color,@alpha);
}

// Linear Gradients
.linear-gradient(tb, @start: #EEE, @stop: #FFF) {
  background: @start;
  background: -webkit-gradient(linear,
  left top,
  left bottom,
  color-stop(0%, @start),
  color-stop(100%, @stop));
  background: -webkit-linear-gradient(top, @start 0%, @stop 100%);
  background: -moz-linear-gradient(top, @start 0%, @stop 100%);
  background: -ms-linear-gradient(top, @start 0%, @stop 100%);
  background: linear-gradient(top, @start 0%, @stop 100%);
}
.linear-gradient(bt, @start: #EEE, @stop: #FFF) {
  background: @start;
  background: -webkit-gradient(linear,
  left bottom,
  left top,
  color-stop(0%, @start),
  color-stop(100%, @stop));
  background: -webkit-linear-gradient(bottom, @start 0%, @stop 100%);
  background: -moz-linear-gradient(bottom, @start 0%, @stop 100%);
  background: -ms-linear-gradient(bottom, @start 0%, @stop 100%);
  background: linear-gradient(bottom, @start 0%, @stop 100%);
}

.linear-gradient(lr, @start: #EEE, @stop: #FFF) {
  background: @start;
  background: -webkit-gradient(linear,
  left top,
  right top,
  color-stop(0%, @start),
  color-stop(100%, @stop));
  background: -webkit-linear-gradient(left, @start 0%, @stop 100%);
  background: -moz-linear-gradient(left, @start 0%, @stop 100%);
  background: -ms-linear-gradient(top, @start 0%, @stop 100%);
  background: linear-gradient(left, @start 0%, @stop 100%);
}

.linear-gradient(tlbr, @start: #EEE, @stop: #FFF) {
  background: @start;
  background: -webkit-gradient(linear,
  left top,
  right bottom,
  color-stop(0%, @start),
  color-stop(100%, @stop));
  background: -webkit-linear-gradient(-45deg, @start 0%, @stop 100%);
  background: -moz-linear-gradient(-45deg, @start 0%, @stop 100%);
  background: -ms-linear-gradient(-45deg, @start 0%, @stop 100%);
  background: linear-gradient(-45deg, @start 0%, @stop 100%);
}

.linear-gradient(trbl, @start: #EEE, @stop: #FFF) {
  background: @start;
  background: -webkit-gradient(linear,
  right top,
  left bottom,
  color-stop(0%, @start),
  color-stop(100%, @stop));
  background: -webkit-linear-gradient(45deg, @start 0%, @stop 100%);
  background: -moz-linear-gradient(45deg, @start 0%, @stop 100%);
  background: -ms-linear-gradient(45deg, @start 0%, @stop 100%);
  background: linear-gradient(45deg, @start 0%, @stop 100%);
}



// Borders
// ==========================================================================

// Border Radius
// none
.border-radius(
  none
) {
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  -ms-border-radius: 0;
  -o-border-radius: 0;
  border-radius: 0;
}

// Percentage
.border-radius(
  cent,
  @t
) {
  -webkit-border-radius: @t;
  -moz-border-radius: @t;
  -ms-border-radius: @t;
  -o-border-radius: @t;
  border-radius: @t;
}

// Single Radius
.border-radius(
  a,
  @context: @baseFontPx,
  @t
) {
  -webkit-border-radius: (@t / @context) + 0em;
  -moz-border-radius: (@t / @context) + 0em;
  -ms-border-radius: (@t / @context) + 0em;
  -o-border-radius: (@t / @context) + 0em;
  border-radius: (@t / @context) + 0em;
}

// Top-Left + Top-Right Radius
.border-radius(
  tlr,
  @context: @baseFontPx,
  @tl: null,
  @tr: null
) {
  -webkit-border-radius: ((@tl / @context) + 0em) ((@tr / @context) + 0em) 0 0;
  -moz-border-radius: ((@tl / @context) + 0em) ((@tr / @context) + 0em) 0 0;
  -ms-border-radius: ((@tl / @context) + 0em) ((@tr / @context) + 0em) 0 0;
  -o-border-radius: ((@tl / @context) + 0em) ((@tr / @context) + 0em) 0 0;
  border-radius: ((@tl / @context) + 0em) ((@tr / @context) + 0em) 0 0;
}

// Top-Left
.border-radius(
  tl,
  @context: @baseFontPx,
  @tl: null
) {
  -webkit-border-radius: ((@tl / @context) + 0em) 0 0 0;
  -moz-border-radius: ((@tl / @context) + 0em) 0 0 0;
  -ms-border-radius: ((@tl / @context) + 0em) 0 0 0;
  -o-border-radius: ((@tl / @context) + 0em) 0 0 0;
  border-radius: ((@tl / @context) + 0em) 0 0 0;
}

// Top-Right
.border-radius(
  tr,
  @context: @baseFontPx,
  @tr: null
) {
  -webkit-border-radius: 0 ((@tr / @context) + 0em) 0 0;
  -moz-border-radius: 0 ((@tr / @context) + 0em) 0 0;
  -ms-border-radius: 0 ((@tr / @context) + 0em) 0 0;
  -o-border-radius: 0 ((@tr / @context) + 0em) 0 0;
  border-radius: 0 ((@tr / @context) + 0em) 0 0;
}

// Bottom-Left + Bottom-Right Radius
.border-radius(
  blr,
  @context: @baseFontPx,
  @br,
  @bl
) {
  -webkit-border-radius: 0 0 ((@br / @context) + 0em) ((@bl / @context) + 0em);
  -moz-border-radius: 0 0 ((@br / @context) + 0em) ((@bl / @context) + 0em);
  -ms-border-radius: 0 0 ((@br / @context) + 0em) ((@bl / @context) + 0em);
  -o-border-radius: 0 0 ((@br / @context) + 0em) ((@bl / @context) + 0em);
  border-radius: 0 0 ((@br / @context) + 0em) ((@bl / @context) + 0em);
}

// Bottom-Left
.border-radius(
  bl,
  @context: @baseFontPx,
  @bl: null
) {
  -webkit-border-radius: 0 0 0 ((@bl / @context) + 0em);
  -moz-border-radius: 0 0 0 ((@bl / @context) + 0em);
  -ms-border-radius: 0 0 0 ((@bl / @context) + 0em);
  -o-border-radius: 0 0 0 ((@bl / @context) + 0em);
  border-radius: 0 0 0 ((@bl / @context) + 0em);
}

// Bottom-Right
.border-radius(
  br,
  @context: @baseFontPx,
  @br: null
) {
  -webkit-border-radius: 0 0 ((@br / @context) + 0em) 0;
  -moz-border-radius: 0 0 ((@br / @context) + 0em) 0;
  -ms-border-radius: 0 0 ((@br / @context) + 0em) 0;
  -o-border-radius: 0 0 ((@br / @context) + 0em) 0;
  border-radius: 0 0 ((@br / @context) + 0em) 0;
}

// Top-Left + Bottom-Left Radius
.border-radius(
  tlbl,
  @context: @baseFontPx,
  @tl: null,
  @bl: null
) {
  -webkit-border-radius: ((@tl / @context) + 0em) 0 0 ((@bl / @context) + 0em);
  -moz-border-radius: ((@tl / @context) + 0em) 0 0 ((@bl / @context) + 0em);
  -ms-border-radius: ((@tl / @context) + 0em) 0 0 ((@bl / @context) + 0em);
  -o-border-radius: ((@tl / @context) + 0em) 0 0 ((@bl / @context) + 0em);
  border-radius: ((@tl / @context) + 0em) 0 0 ((@bl / @context) + 0em);
}

// Top-Left + Bottom-Left Radius
.border-radius(
  trbr,
  @context: @baseFontPx,
  @tr: null,
  @br: null
) {
  -webkit-border-radius: 0 ((@tr / @context) + 0em) ((@br / @context) + 0em) 0;
  -moz-border-radius: 0 ((@tr / @context) + 0em) ((@br / @context) + 0em) 0;
  -ms-border-radius: 0 ((@tr / @context) + 0em) ((@br / @context) + 0em) 0;
  -o-border-radius: 0 ((@tr / @context) + 0em) ((@br / @context) + 0em) 0;
  border-radius: 0 ((@tr / @context) + 0em) ((@br / @context) + 0em) 0;
}

// All Four Radii
.border-radius(
  tlrbrl,
  @context: @baseFontPx,
  @tl,
  @tr,
  @br,
  @bl
) {
  -webkit-border-radius: ((@tl / @context) + 0em) ((@tr / @context) + 0em) ((@br / @context) + 0em) ((@bl / @context) + 0em);
  -moz-border-radius: ((@tl / @context) + 0em) ((@tr / @context) + 0em) ((@br / @context) + 0em) ((@bl / @context) + 0em);
  -ms-border-radius: ((@tl / @context) + 0em) ((@tr / @context) + 0em) ((@br / @context) + 0em) ((@bl / @context) + 0em);
  -o-border-radius: ((@tl / @context) + 0em) ((@tr / @context) + 0em) ((@br / @context) + 0em) ((@bl / @context) + 0em);
  border-radius: ((@tl / @context) + 0em) ((@tr / @context) + 0em) ((@br / @context) + 0em) ((@bl / @context) + 0em);
}


// ==========================================================================
// Use-Specific  Mixins
// ==========================================================================
.popupShadow(
  @shadowColour: rgba(0,0,0,.12)
) {
  .box-shadow(0 ((9 / @baseFontPx) + 0em) ((27 / @baseFontPx) + 0em) @shadowColour);
}

.3dShadow(
@shadowFace: @moduleGrey
) {
  .border(b,@baseFontPx,2,@shadowFace);
}

// CSS3 Viewport
#viewport(
  @width: ((320 / 16) + 0em)
) {
  @-webkit-viewport {width: @width;}
  @-moz-viewport {width: @width;}
  @-o-viewport {width: @width;}
  @-ms-viewport {width: @width;}
  //@viewport {width: @width;}
}

//stop flicker after a transition in Safari
.stopTransitionFlicker(){
  -webkit-backface-visibility: hidden;
  -webkit-perspective: 1000;
}


//force hardware acceleration - includes additional speed boosts
.forceAcceleration(){
  .stopTransitionFlicker();
  // limiting to only -webkit due to FF bug
  -webkit-transform: translate3D(0,0,0);
}



// ==========================================================================
// Modals
// ==========================================================================
#modalTransitions() {
  //scale 0 -> 1
  .contentTransform(@arguments) {
    -webkit-transition: ~"-webkit-transform" @arguments;
    -o-transition: ~"-o-transform" @arguments;
    -ms-transition: ~"-ms-transform" @arguments;
    -moz-transition: ~"-moz-transform" @arguments;
    transition: transform @arguments;
  }
}
// ==========================================================================
// Off Canvas
// ==========================================================================
@offCanvasTransitionTime: 360ms;
@offCanvasTransitionType: cubic-bezier(0.230, 1.000, 0.320, 1.000);
#offCanvas(){

  .siteContentWrap(){
    overflow:hidden;
    width:100%;
  }

  //for when the site coloumn is hidden
  #hidden(){
    .columnLeft(
      @colCount: 1,
      @cols: 6,
      @transitionTime: @offCanvasTransitionTime,
      @target: @baseFontPx
    ) {
      @width:(100 / @cols) * @colCount;

      margin-left:-@width + 0%;
      .padding(trbl,@target,24,0,24,(24 - (24/(100/@width))));
      position:relative;
      width: @width + 0%;
      .transform(translateZ(0));
    }

    .columnRight(
      @colCount: 1,
      @cols: 6,
      @transitionTime: @offCanvasTransitionTime,
      @target: @baseFontPx
    ) {
      @width:(100 / @cols) * @colCount;
      margin-left: 0;
      margin-right:-@width + 0%;
      .padding(trbl,@target,24,0,24,(48 - (24/(100/@width))));
      //.pos(r,@target,-(24/(100/@width)));
      position:relative;
      width: @width + 0%;
      .transform(translateZ(0));
    }

    .siteContent(
      @transitionTime: @offCanvasTransitionTime
    ) {
      background:lighten(@moduleGrey,18%);
      position:relative;
      .transform(translateZ(0));
      .transition(
        left @transitionTime @offCanvasTransitionType~","
        right @transitionTime @offCanvasTransitionType
       );
    }
  }

  //for when the site coloumn is visible
  #visible(){
    .column(
      @transitionTime: @offCanvasTransitionTime
    ) {
      .transition(
        width @transitionTime @offCanvasTransitionType 0s~","
        margin-left @transitionTime @offCanvasTransitionType 0s~","
        margin-right @transitionTime @offCanvasTransitionType 0s);
    }

    .siteContentLeft(
      @colCount: 1,
      @cols: 6,
      @transitionTime: @offCanvasTransitionTime,
      @target: @baseFontPx
    ) {
      @width:(100 / @cols) * @colCount;

      left:@width + 0%;
      .transition(left @transitionTime @offCanvasTransitionType 0s);
    }

    .siteContentRight(
      @colCount: 1,
      @cols: 6,
      @transitionTime: @offCanvasTransitionTime,
      @target: @baseFontPx
    ) {
      @width:(100 / @cols) * @colCount;

      right:@width + 0%;
      .transition(right @transitionTime @offCanvasTransitionType 0s);
    }
  }
}
